lby$`Country of asylum` <- as.factor(lby$`Country of asylum`)
lby$year <- as.numeric(lby$year)
lby$asylumseekers <- as.numeric(lby$asylumseekers)
lby_p <- ggplot(lby, aes(year, asylumseekers)) + geom_line(aes(colour=factor(`Country of asylum`))) +
ggtitle("Destinations of Asylum Seekers from Syria") + ylab("Asylum Seekers") + xlab("Year")
ggplotly(lby_p)
lby <- flow_dest %>% filter(
`Origin` == "Libya", `Population type` == "Asylum-seekers"
)
lby <- lby[, !(names(lby) %in% c("Origin", "Population type"))]
lby <- pivot_longer(lby, # Make wide data long for easier plotting
cols = c(2:59),
names_to = "year",
values_to = "asylumseekers")
lby$`Country of asylum` <- as.factor(lby$`Country of asylum`)
lby$year <- as.numeric(lby$year)
lby$asylumseekers <- as.numeric(lby$asylumseekers)
lby_p <- ggplot(lby, aes(year, asylumseekers)) + geom_line(aes(colour=factor(`Country of asylum`))) +
ggtitle("Destinations of Asylum Seekers from Libya") + ylab("Asylum Seekers") + xlab("Year")
ggplotly(lby_p)
# Sudan
sdn <- flow_dest %>% filter(
`Origin` == "Sudan", `Population type` == "Asylum-seekers"
)
View(sdn)
sdn <- flow_dest %>% filter(
`Origin` == "Sudan", `Population type` == "Asylum-seekers"
)
sdn <- sdn[, !(names(sdn) %in% c("Origin", "Population type"))]
sdn <- pivot_longer(sdn, # Make wide data long for easier plotting
cols = c(2:59),
names_to = "year",
values_to = "asylumseekers")
sdn$`Country of asylum` <- as.factor(sdn$`Country of asylum`)
sdn$year <- as.numeric(sdn$year)
sdn$asylumseekers <- as.numeric(sdn$asylumseekers)
sdn_p <- ggplot(sdn, aes(year, asylumseekers)) + geom_line(aes(colour=factor(`Country of asylum`))) +
ggtitle("Destinations of Asylum Seekers from Sudan") + ylab("Asylum Seekers") + xlab("Year")
ggplotly(sdn_p)
ssd <- flow_dest %>% filter(
`Origin` == "South Sudan", `Population type` == "Asylum-seekers"
)
ssd <- ssd[, !(names(ssd) %in% c("Origin", "Population type"))]
ssd <- pivot_longer(ssd, # Make wide data long for easier plotting
cols = c(2:59),
names_to = "year",
values_to = "asylumseekers")
ssd$`Country of asylum` <- as.factor(ssd$`Country of asylum`)
ssd$year <- as.numeric(ssd$year)
ssd$asylumseekers <- as.numeric(ssd$asylumseekers)
ssd_p <- ggplot(ssd, aes(year, asylumseekers)) + geom_line(aes(colour=factor(`Country of asylum`))) +
ggtitle("Destinations of Asylum Seekers from South Sudan") + ylab("Asylum Seekers") + xlab("Year")
ggplotly(ssd_p)
# Mali
mli <- flow_dest %>% filter(
`Origin` == "Mali", `Population type` == "Asylum-seekers"
)
mli <- flow_dest %>% filter(
`Origin` == "Mali", `Population type` == "Asylum-seekers"
)
mli <- mli[, !(names(mli) %in% c("Origin", "Population type"))]
mli <- pivot_longer(mli, # Make wide data long for easier plotting
cols = c(2:59),
names_to = "year",
values_to = "asylumseekers")
mli$`Country of asylum` <- as.factor(mli$`Country of asylum`)
mli$year <- as.numeric(mli$year)
mli$asylumseekers <- as.numeric(mli$asylumseekers)
mli_p <- ggplot(mli, aes(year, asylumseekers)) + geom_line(aes(colour=factor(`Country of asylum`))) +
ggtitle("Destinations of Asylum Seekers from Mali") + ylab("Asylum Seekers") + xlab("Year")
ggplotly(mli_p)
nga <- flow_dest %>% filter(
`Origin` == "Nigeria", `Population type` == "Asylum-seekers"
)
nga <- nga[, !(names(nga) %in% c("Origin", "Population type"))]
nga <- pivot_longer(nga, # Make wide data long for easier plotting
cols = c(2:59),
names_to = "year",
values_to = "asylumseekers")
nga$`Country of asylum` <- as.factor(nga$`Country of asylum`)
nga$year <- as.numeric(nga$year)
nga$asylumseekers <- as.numeric(nga$asylumseekers)
nga_p <- ggplot(nga, aes(year, asylumseekers)) + geom_line(aes(colour=factor(`Country of asylum`))) +
ggtitle("Destinations of Asylum Seekers from Nigeria") + ylab("Asylum Seekers") + xlab("Year")
ggplotly(nga_p)
# Somalia
som <- flow_dest %>% filter(
`Origin` == "Somalia", `Population type` == "Asylum-seekers"
)
som <- flow_dest %>% filter(
`Origin` == "Somalia", `Population type` == "Asylum-seekers"
)
som <- som[, !(names(som) %in% c("Origin", "Population type"))]
som <- pivot_longer(som, # Make wide data long for easier plotting
cols = c(2:59),
names_to = "year",
values_to = "asylumseekers")
som$`Country of asylum` <- as.factor(som$`Country of asylum`)
som$year <- as.numeric(som$year)
som$asylumseekers <- as.numeric(som$asylumseekers)
som_p <- ggplot(som, aes(year, asylumseekers)) + geom_line(aes(colour=factor(`Country of asylum`))) +
ggtitle("Destinations of Asylum Seekers from Somalia") + ylab("Asylum Seekers") + xlab("Year")
ggplotly(som_p)
gtm <- flow_dest %>% filter(
`Origin` == "Guatemala", `Population type` == "Asylum-seekers"
)
gtm <- gtm[, !(names(gtm) %in% c("Origin", "Population type"))]
gtm <- pivot_longer(gtm, # Make wide data long for easier plotting
cols = c(2:59),
names_to = "year",
values_to = "asylumseekers")
gtm$`Country of asylum` <- as.factor(gtm$`Country of asylum`)
gtm$year <- as.numeric(gtm$year)
gtm$asylumseekers <- as.numeric(gtm$asylumseekers)
gtm_p <- ggplot(gtm, aes(year, asylumseekers)) + geom_line(aes(colour=factor(`Country of asylum`))) +
ggtitle("Destinations of Asylum Seekers from Guatemala") + ylab("Asylum Seekers") + xlab("Year")
ggplotly(gtm_p)
# Venezuela
ven <- flow_dest %>% filter(
`Origin` == "Venezuela (Bolivarian Republic of)", `Population type` == "Asylum-seekers"
)
ven <- flow_dest %>% filter(
`Origin` == "Venezuela (Bolivarian Republic of)", `Population type` == "Asylum-seekers"
)
ven <- ven[, !(names(ven) %in% c("Origin", "Population type"))]
ven <- pivot_longer(ven, # Make wide data long for easier plotting
cols = c(2:59),
names_to = "year",
values_to = "asylumseekers")
ven$`Country of asylum` <- as.factor(ven$`Country of asylum`)
ven$year <- as.numeric(ven$year)
ven$asylumseekers <- as.numeric(ven$asylumseekers)
ven_p <- ggplot(ven, aes(year, asylumseekers)) + geom_line(aes(colour=factor(`Country of asylum`))) +
ggtitle("Destinations of Asylum Seekers from Venezuela") + ylab("Asylum Seekers") + xlab("Year")
ggplotly(ven_p)
shiny::runApp('~/GitHub/MDI/Code/Mapping')
library(foreign)
library(foreign)
# Set directory and load data
setwd("C:/Users/Connor/Documents/GitHub/MDI")
library(haven)
dist_cepii <- read_dta("Data/dist_cepii.dta")
View(dist_cepii)
priority_flow_long <- priority_flow_long[,-c(1)]
# Load data
priority_flow_long <- read_csv("Data/priority_flow_long.csv")
priority_flow_long <- priority_flow_long[,-c(1)]
View(priority_flow_long)
# Comparing Origins and Destinations (UNHCR)
# Author: Connor Kelly
# Date: Dec 15, 2020
# Packages
library(readxl)
library(tidyverse)
library(foreign)
# Set directory
setwd("C:/Users/Connor/Documents/GitHub/MDI")
# Load data
priority_flow_long <- read_csv("Data/priority_flow_long.csv")
priority_flow_long <- priority_flow_long[,-c(1)] # Drop useless column
# CEPII distance data http://www.cepii.fr/pdf_pub/wp/2011/wp2011-25.pdf
dist_cepii <- read_dta("Data/dist_cepii.dta")
View(dist_cepii)
View(priority_flow_long)
View(dist_cepii)
total <- merge(priority_flow_long, dist_cepii, by.x("originiso", "destiso"), by.y=("iso_o", "iso_d"))
total <- merge(priority_flow_long, dist_cepii, by.x("originiso", "destiso"), by.y=("iso_o", "iso_d"))
total <- merge(priority_flow_long, dist_cepii, by.x("originiso", "destiso"), by.y=("iso_o", "iso_d")))
total <- merge(priority_flow_long, dist_cepii, by.x("originiso", "destiso"), by.y=("iso_o", "iso_d"))
total <- merge(priority_flow_long, dist_cepii, by.x=c("originiso", "destiso"), by.y=c("iso_o", "iso_d"))
View(total)
View(dist_cepii)
unchr_cepii <- merge(priority_flow_long, dist_cepii, by.x=c("originiso", "destiso"), by.y=c("iso_o", "iso_d"))
View(priority_flow_long)
unchr_cepii <- merge(priority_flow_long, dist_cepii, by.x=c("originiso", "destiso"), by.y=c("iso_o", "iso_d"), all.x=TRUE)
View(unchr_cepii)
unhcr_cepii <- merge(priority_flow_long, dist_cepii, by.x=c("originiso", "destiso"), by.y=c("iso_o", "iso_d"), all.x=TRUE)
new_df <- unhcr_cepii[rowSums(is.na(unhcr_cepii))>0,]
View(dist_cepii)
View(new_df)
View(dist_cepii)
levels(unhcr_cepii$destiso)
unique(new_df$destiso)
unique(new_df$originiso)
View(unhcr_cepii)
# Comparing Origins and Destinations (UNHCR)
# Author: Connor Kelly
# Date: Dec 15, 2020
# Packages
library(readxl)
library(tidyverse)
library(foreign)
# Set directory
setwd("C:/Users/Connor/Documents/GitHub/MDI")
# Load data
priority_flow_long <- read_csv("Data/priority_flow_long.csv")
priority_flow_long <- priority_flow_long[,-c(1)] # Drop useless column
# CEPII distance data http://www.cepii.fr/pdf_pub/wp/2011/wp2011-25.pdf
dist_cepii <- read_dta("Data/dist_cepii.dta")
unhcr_cepii <- merge(priority_flow_long, dist_cepii, by.x=c("originiso", "destiso"), by.y=c("iso_o", "iso_d"), all.x=TRUE)
new_df <- unhcr_cepii[rowSums(is.na(unhcr_cepii))>0,]
View(new_df)
unique(new_df$destiso)
View(dist_cepii)
View(dist_cepii)
View(priority_flow_long)
View(unhcr_cepii)
summary(unhcr_cepii$comlang_off)
View(dist_cepii)
fit <- lm(refugees ~ contig + comlang_of + comlang_ethno + colony + distw, data=unhcr_cepii)
fit <- lm(refugees ~ contig + comlang_off + comlang_ethno + colony + distw, data=unhcr_cepii)
summary(fit)
fit <- lm(refugees ~ contig + comlang_ethno + comlang_ethno + colony + distw, data=unhcr_cepii)
summary(fit)
fit <- lm(refugees ~ contig + comlang_ethno + comlang_ethno + colony + col45 + distw, data=unhcr_cepii)
summary(fit)
fit <- lm(refugees ~ contig + comlang_ethno + colony + col45 + distw, data=unhcr_cepii)
summary(fit)
fit <- lm(refugees ~ contig + comlang_ethno + colony + col45 + dist + distw, data=unhcr_cepii)
summary(fit)
fit <- lm(refugees ~ contig + comlang_ethno + colony + col45 + dist, data=unhcr_cepii)
summary(fit)
fit <- lm(refugees ~ contig + comlang_ethno + colony + col45 + dist + distw, data=unhcr_cepii)
summary(fit)
library(readr)
API_NY_GDP_MKTP_CD_DS2_en_csv_v2_1740389 <- read_csv("Data/API_NY.GDP.MKTP.CD_DS2_en_csv_v2_1740389.csv")
View(API_NY_GDP_MKTP_CD_DS2_en_csv_v2_1740389)
gdp <- read_excel("Data/API_NY.GDP.MKTP.CD_DS2_en_excel_v2_1740133.xls",
skip = 2)
View(gdp)
gdp <- pivot_longer(gdp, cols = c(5:65), names_to = "year", values_to = "gdp")
gdp <- gdp[, -c(1, 3, 4)]
# Merge destination gdp for given year
unhcr_cepii <- merge(unhcr_cepii, gdp, by.x=c("destiso", "year"), by.y=c("Country Code", "year"))
# Regression
fit <- lm(refugees ~ contig + comlang_ethno + colony + col45 + dist + distw + gdp, data=unhcr_cepii)
summary(fit)
# Regression
fit <- lm(refugees ~  comlang_ethno + colony + col45 + dist + distw + gdp, data=unhcr_cepii)
summary(fit)
# Regression
fit <- lm(refugees ~ contig + comlang_ethno + colony + col45 + dist + distw + gdp, data=unhcr_cepii)
summary(fit)
summary(unhcr_cepii$gdp)
# World Bank GDP per Capita
gdppc <- read_excel("Data/API_NY.GDP.PCAP.PP.KD_DS2_en_excel_v2_1740674.xls", skip = 2)
View(gdppc)
View(gdp)
gdppc <- pivot_longer(gdppc, cols = c(5:65), names_to = "year", values_to = "gdp_pc")
gdppc <- gdppc[, -c(1,3,4)]
# World Bank GDP per Capita
gdp_pc <- read_excel("Data/API_NY.GDP.PCAP.CD_DS2_en_excel_v2_1836202.xls", skip = 2)
# World Bank GDP per Capita
gdp_pc <- read_excel("Data/API_NY.GDP.PCAP.CD_DS2_en_excel_v2_1836202.xls", skip = 2)
gdp_pc <- pivot_longer(gdp_pc, cols = c(5:65), names_to = "year", values_to = "gdp_pc")
gdp_pc <- gdp_pc[, -c(1,3,4)]
View(gdp_pc)
gdp <- merge(gdp, gdp_pc, by=c("Country Code", "year"))
View(gdp)
library(readxl)
library(tidyverse)
library(foreign)
# Set directory
setwd("C:/Users/Connor/Documents/GitHub/MDI")
# Load data
# UNHCR
priority_flow_long <- read_csv("Data/priority_flow_long.csv")
priority_flow_long <- priority_flow_long[,-c(1)] # Drop useless column
# CEPII distance data http://www.cepii.fr/pdf_pub/wp/2011/wp2011-25.pdf
dist_cepii <- read_dta("Data/dist_cepii.dta")
# World Bank GDP data https://data.worldbank.org/indicator/NY.GDP.MKTP.CD
gdp <- read_excel("Data/API_NY.GDP.MKTP.CD_DS2_en_excel_v2_1740133.xls", skip = 2)
gdp <- pivot_longer(gdp, cols = c(5:65), names_to = "year", values_to = "gdp")
gdp <- gdp[, -c(1, 3, 4)]
# World Bank GDP per Capita https://data.worldbank.org/indicator/NY.GDP.PCAP.CD
gdp_pc <- read_excel("Data/API_NY.GDP.PCAP.CD_DS2_en_excel_v2_1836202.xls", skip = 2)
gdp_pc <- pivot_longer(gdp_pc, cols = c(5:65), names_to = "year", values_to = "gdp_pc")
gdp_pc <- gdp_pc[, -c(1,3,4)]
gdp <- merge(gdp, gdp_pc, by=c("Country Code", "year"))
unhcr_cepii <- merge(priority_flow_long, dist_cepii, by.x=c("originiso", "destiso"), by.y=c("iso_o", "iso_d"), all.x=TRUE)
# Merge destination gdp for given year
unhcr_cepii <- merge(unhcr_cepii, gdp, by.x=c("destiso", "year"), by.y=c("Country Code", "year"))
summary(unhcr_cepii$gdp)
View(unhcr_cepii)
# Regression
fit <- lm(refugees ~ contig + comlang_ethno + colony + col45 + dist + distw + gdp + gdp_pc, data=unhcr_cepii)
summary(fit)
runApp('Code/Mapping')
install.packages("gganimate")
library(gganimate)
install.packages("gapminder")
library(plotly)
library(gapminder)
df <- gapminder
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers'
)
fig <- fig %>% layout(
xaxis = list(
type = "log"
)
)
fig
View(df)
# Plot
afg <- priority_flow_long %>%
filter(Origin == "Afghanistan")
View(afg)
plot_ly(afg,
type = 'choropleth',
locations = afg$destiso,
z = afg$refugees,
frame = afg$year)
plot_ly(afg,
type = 'choropleth',
locations = afg$destiso,
z = afg$refugees,
frame = afg$year,
colorscale="Blues_r")
View(afg)
# Plot
afg <- priority_flow_long %>%
filter(Origin == "Afghanistan") %>%
group_by("year") %>%
mutate(yeartotal = sum(refugees))
# Plot
afg <- priority_flow_long %>%
filter(Origin == "Afghanistan") %>%
group_by("year") %>%
mutate(yeartotal = sum(refugees))
summary(afg$yeartotal)
# Plot
afg <- priority_flow_long %>%
filter(Origin == "Afghanistan") %>%
group_by(year) %>%
mutate(yeartotal = sum(refugees))
summary(afg$yeartotal)
# Plot
afg <- priority_flow_long %>%
filter(Origin == "Afghanistan") %>%
group_by(year) %>%
mutate(yeartotal = sum(refugees)) %>%
mutate(percent = refugees/yeartotal)
summary(afg$percent)
plot_ly(afg,
type = 'choropleth',
locations = afg$destiso,
z = afg$percent,
frame = afg$year,
colorscale="Blues_r")
# Animations
# Connor Kelly
# December 15, 2020
# Load packages
library(tidyverse)
library(readr)
library(ggplot2)
library(plotly)
library(gganimate)
# Set directory and load data
setwd("C:/Users/Connor/Documents/GitHub/MDI")
priority_flow_long <- read_csv("Data/priority_flow_long.csv")
# Plot
afg <- priority_flow_long %>%
filter(Origin == "Afghanistan") %>%
group_by(year) %>%
mutate(yeartotal = sum(refugees)) %>%
mutate(percent = refugees/yeartotal)
summary(afg$yeartotal)
library(plotly)
library(gapminder)
plot_ly(afg,
type = 'choropleth',
locations = afg$destiso,
z = afg$refugees,
frame = afg$year,
colorscale="Blues_r")
plot_ly(afg,
type = 'choropleth',
locations = afg$destiso,
z = afg$refugees,
frame = afg$year,
colorscale=[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']])
plot_ly(afg,
type = 'choropleth',
locations = afg$destiso,
z = afg$refugees,
frame = afg$year,
zmin = 0,
zmax = 	1400000,
colorscale="Blues_r")
runApp('Code/Mapping')
# Shiny App: Mapping Forced Migration
# Connor Kelly
# December 15, 2020
# Load packages
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
library(rsconnect)
# Set directory and load data
setwd("C:/Users/Connor/Documents/GitHub/MDI")
priority_flow_long <- read_csv("Data/priority_flow_long.csv")
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
titlePanel("Flows from Country of Origin"),
# Output
plotlyOutput(outputId = "map"),
# Inputs
fluidRow(
# Select country to plot
selectInput(inputId = "country", label = strong("Country of origin"),
choices = unique(priority_flow_long$Origin),
selected = "Afghanistan"),
# Select year of observation
numericInput(inputId = "date", strong("Year"), value=1962, min = 1962, max = 2019, step=1)
),
)
# Define server function
server <- function(input, output) {
# Subset data
selected_country <- reactive({
priority_flow_long %>%
filter(Origin == input$country, year == input$date)
})
# Create plot
output$map <- renderPlotly({
print(
plot_ly(selected_country(), type='choropleth', locations=selected_country()$destiso,
z=selected_country()$refugees, frame = selected_country()$year, zmin=0,
zmax=max(selected_country()$refugees), colorscale="Blues_r")
)
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
# To download and run app from GitHub through R:
# runGitHub("MDI", "pconnorkelly")
# Subset data
selected_country <- reactive({
priority_flow_long %>%
filter(Origin == input$country, year == input$date)
})
# Shiny App: Mapping Forced Migration
# Connor Kelly
# December 15, 2020
# Load packages
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
library(rsconnect)
# Set directory and load data
setwd("C:/Users/Connor/Documents/GitHub/MDI")
priority_flow_long <- read_csv("Data/priority_flow_long.csv")
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
titlePanel("Flows from Country of Origin"),
# Output
plotlyOutput(outputId = "map"),
# Inputs
fluidRow(
# Select country to plot
selectInput(inputId = "country", label = strong("Country of origin"),
choices = unique(priority_flow_long$Origin),
selected = "Afghanistan"),
# Select year of observation
numericInput(inputId = "date", strong("Year"), value=1962, min = 1962, max = 2019, step=1)
),
)
# Define server function
server <- function(input, output) {
# Subset data
selected_country <- reactive({
priority_flow_long %>%
filter(Origin == input$country, year == input$date)
})
# Create plot
output$map <- renderPlotly({
print(
plot_ly(selected_country(), type='choropleth', locations=selected_country()$destiso,
z=selected_country()$refugees, frame = selected_country()$year, zmin=0,
zmax=max(selected_country()$refugees), colorscale="Blues_r")
)
})
}
runApp('Code/Mapping')
runApp('Code/Mapping')
runApp('Code/Mapping')
runApp('Code/Mapping')
runApp('Code/Mapping')
runApp('Code/Mapping')
print(
plot_ly(selected_country(), type='choropleth', locations=selected_country()$destiso,
z=selected_country()$refugees, zmin=0, zmax=max(selected_country()$refugees),
frame = selected_country()$year, colorscale="Jet")
)
runApp('Code/Mapping')
