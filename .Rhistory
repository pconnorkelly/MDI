# Cleaning UNHCR Flow Data for Use with Shiny App
# Author: Connor Kelly
# Date: Dec 4, 2020
# Packages
library(readxl)
library(tidyverse)
library(maptools)
library(sf)
library(cartogram)
library(plotly)
library(countrycode)
library(tmap)
library(maps)
############
# Setup and Initial Cleaning
############
setwd("C:/Users/Connor/Documents/GitHub/MDI")
priority_flow <- read_csv("Data/priority_flow.csv")
priority_flow <- priority_flow[, -c(1)]
priority_flow_long <- read_csv("Data/priority_flow_long.csv")
priority_flow_long <- priority_flow_long[, -c(1)]
# Add ISO3 codes
priority_flow_long$originiso <- countrycode(priority_flow_long$Origin, "country.name", "iso3c")
priority_flow_long$destiso <- countrycode(priority_flow_long$`Country of asylum`, "country.name", "iso3c")
priority_flow_long <- priority_flow_long[, c(1,5,2,6,3:4)]
afg <- priority_flow_long %>%
filter(originiso == "AFG") %>%
group_by(destiso) %>%
summarize(refugees = sum(refugees))
# Map
data("wrld_simpl")
wrld_simpl@data <- wrld_simpl@data %>% merge(., afg, by.x="ISO3", by.y="destiso", all=TRUE)
wrld_simpl@data$refugees[is.na(wrld_simpl@data$refugees)] <- 0
wrld_simpl@data <- wrld_simpl@data[!is.na(wrld_simpl@data$ISO3),]
library(viridis)
US3 <- readOGR(dsn="Projectmaps", layer = "US3")
library(rgdal)
US3 <- readOGR(dsn="Projectmaps", layer = "US3")
# Mapping Displacement with UNHCR Data
# Author: Connor Kelly
# Date: Dec 4, 2020
# Packages
library(readxl)
library(tidyverse)
library(maptools)
# library(sf)
#library(cartogram)
library(plotly)
#library(countrycode)
#library(tmap)
#library(maps)
#library(viridis)
library(rgdal)
# Load world map and data
data("wrld_simpl")
View(wrld_simpl)
View(wrld_simpl)
nepal.adm3.shp <- readOGR(dsn="./NepalMaps/baselayers/NPL_adm", layer="NPL_adm3", stringsAsFactors = FALSE)
nepal.adm3.shp.df <- fortify(nepal.adm3.shp, region = "NAME_3")
View(nepal.adm3.shp)
View(nepal.adm3.shp.df)
View(nepal.adm3.shp@data)
plot(nepal.adm3.shp)
View(wrld_simpl)
View(wrld_simpl@data)
world.df <- fortify(wrld_simpl, region = "ISO3")
View(world.df)
install.packages("rworldmap")
library(rworldmap)
mapDevice(`x11`)
mapDevice('x11')
View(priority_flow)
View(priority_flow_long)
View(priority_flow_long)
View(afg)
spdf <- joinCountryData2Map(afg, joinCode = "ISO3", nameJoinColumn = "destiso")
View(priority_flow_long)
View(spdf)
mapCountryData(spdf, nameColumnToPlot = "refugees", catMethod = "fixedWidth")
library(RColorBrewer)
plotPascal <- function() {
pal <- colorRampPalette(brewer.pal(9, 'Reds'))(length(ddf$value))
pal <- pal[with(ddf, findInterval(value, sort(unique(value))))]
col <- rep(grey(0.8), length(wrld_simpl@data$NAME))
col[match(ddf$country, wrld_simpl@data$NAME)] <- pal
plot(wrld_simpl, col = col)
}
pal <- colorRampPalette(brewer.pal(9, 'Reds'))(length(ddf$value))
pal <- colorRampPalette(brewer.pal(9, 'Reds'))(length(afg$refugees))
mapCountryData(spdf, nameColumnToPlot = "refugees", catMethod = "pretty")
mapDevice('x11')
mapCountryData(spdf, nameColumnToPlot = "refugees", catMethod = "pretty")
View(afg)
